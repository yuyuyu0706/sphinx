
###########################################
Pythonで始めるソフトウェアアーキテクチャ
###########################################

* ポイント：どう感じたかを記述してみよう

目次
####################

第1章 ソフトウェアアーキテクチャの原則
==========================================

定義
---------
* しゃべり散らしてる印象が拭えない。キラーワードが見当たらない。
* あえて挙げるなら、次の箇所。

  * アーキテクチャは、骨組み。機能に焦点を当てていない。(P2)
　　* デザインは、コード・モジュールに対して考える。(P2)

特性
---------
* ストラクチャは、アーキテクチャの見通しを良くする（P4)
* ストラクチャは、システム構築に関わるチーム編成も同時に表される(P6)

重要性
---------
* 「なぜアーキテクチャなのか？、なぜ重要なのか？」に対する答えは表になっていた。探してしまった。
* 答えと所感をメモ。
  * 最適な品質属性の選択を可能にする
  * 初期プロトタイプを促す
  * コンポーネント単位で構築可能にする
  * 円滑なシステム変更を可能にする

* なぜ、システム構築には正しいアーキテクチャが必要不可欠なのか？
  * 全てのシステムは潜在的にアーキテクチャを備えているため　→　これの理由は記載なし

* 潜在しているので、きちんと文書化しておこう。情報共有できるので、忘れずにやりましょう。とのこと。至極当然。

システムアーキテクチャとエンタープライズアーキテクチャ
--------------------------------------------------
* エンタープライズアーキテクトを戦略面におき、残りのアーキテクトが技術面で支える説明。
* 「戦略／技術」、「組織／PJ」のマトリックスは位置づけわかりやすい。(P13-図1.7)


品質属性
-----------------
* 本書の主題。それが、品質属性。
* ステークホルダ間の要求を調整して、アーキテクチャは選択するもの。
* 矛盾する要求には、トレードオフを考慮する。
* 品質属性は多岐に渡るため、本書では7つに厳選した。
  * 修正容易性
  * テスト容易性
  * スケーラビリティ
  * パフォーマンス
  * 可用性
  * セキュリティ
  * デプロイ容易性

まとめ
--------------

* 
* 

第2章 修正容易性と可読性
===========================

第3章 テスト容易性
===========================

第4章
==================
第5章
==================

