##########################################
なぜ、オブジェクト指向で作るのか
##########################################

ポイント
=======================

目次列挙
=======================

* オブジェクト指向はソフトウェア開発を楽にする技術
* オブジェクト指向と現実世界は、似て非なるもの
* OOPを理解する近道は、プログラミング言語の歴史にあり
* OOPは無駄を省いて整理整頓するプログラミング技術
* メモリの仕組みの理解はプログラマのたしなみ
* OOPがもたらしたソフトウェアとアイデアの再利用
* 汎用の整理術に化けたオブジェクト指向
* UMLは形のないソフトウェアを見る道具
* 現実世界とソフトウェアのギャップを埋めるモデリング
* 擬人化して役割分担させるオブジェクト指向設計

  * 設計が対象とする範囲は広く深い
  * 実行効率よりも保守性・再利用性を重視する時代
  * 設計の目標①：重複を排除する
  * 設計の目標②：部品の独立性を高める
  * 設計の目標③：依存関係を循環させない

* オブジェクト指向から始めるアジャイル開発のTDD
* オブジェクト指向を使いこなそう
* 関数型言語でなぜつくるのか

精読メモ
=================

第1章 オブジェクト指向はソフトウェア開発を楽にする技術
*************************************************
* 疑問：なぜ、楽に出来るのか？

  答え：

第2章 オブジェクト指向と現実世界は、似て非なるもの
*************************************************
* 疑問：何を持って違うと断言する？

  答え：

第10章 擬人化して役割分担させるオブジェクト指向設計
*************************************************
* 疑問："擬人化とは？"
* 疑問："オブジェクト指向と設計の関係とは？"


設計が対象とする範囲は広く深い
--------------------------------------------

実行効率よりも保守性・再利用性を重視する時代
--------------------------------------------

設計の目標①：重複を排除する
--------------------------------------------

設計の目標②：部品の独立性を高める
--------------------------------------------

設計の目標③：依存関係を循環させない
--------------------------------------------


第11章 オブジェクト指向から始めるアジャイル開発のTDD
****************************************************
* 疑問：TDDとは？

第12章 オブジェクト指向を使いこなそう
****************************************************
* 疑問：どのように使いこなす？

第13章 オブジェクト指向を使いこなそう
****************************************************






