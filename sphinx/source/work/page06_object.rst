##########################################
なぜ、オブジェクト指向で作るのか
##########################################

ポイント
=======================

目次列挙
=======================

* オブジェクト指向はソフトウェア開発を楽にする技術
* オブジェクト指向と現実世界は、似て非なるもの
* OOPを理解する近道は、プログラミング言語の歴史にあり
* OOPは無駄を省いて整理整頓するプログラミング技術
* メモリの仕組みの理解はプログラマのたしなみ
* OOPがもたらしたソフトウェアとアイデアの再利用
* 汎用の整理術に化けたオブジェクト指向
* UMLは形のないソフトウェアを見る道具
* 現実世界とソフトウェアのギャップを埋めるモデリング
* 擬人化して役割分担させるオブジェクト指向設計

  * 設計が対象とする範囲は広く深い
  * 実行効率よりも保守性・再利用性を重視する時代
  * 設計の目標①：重複を排除する
  * 設計の目標②：部品の独立性を高める
  * 設計の目標③：依存関係を循環させない

* オブジェクト指向から始めるアジャイル開発のTDD
* オブジェクト指向を使いこなそう
* 関数型言語でなぜつくるのか

精読メモ
=================

第1章 オブジェクト指向はソフトウェア開発を楽にする技術
*************************************************
* 疑問：なぜ、楽に出来るのか？

  答え：

第2章 オブジェクト指向と現実世界は、似て非なるもの
*************************************************
* 疑問：何を持って違うと断言する？

  答え：

第7章 汎用の整理術に化けたオブジェクト指向
***************************************************
* 疑問：どうして化けることができたのだろうか？

  答え：


第10章 擬人化して役割分担させるオブジェクト指向設計
****************************************************
* 疑問：この章が言いたいこととは？

  | 答え：設計時に必要なことは、クラスに責務を与える（=役割分担）こと。
  |     そのためには、あえて擬人化表現（こいつ、あいつ）と呼ぶと良いだろう

* 疑問：擬人化とは？

  | 答え：「こいつ」、「あいつ」と人を指すような表現のこと

* 疑問：役割分担をさせるとは？

  | 答え：責務(Responsibility)を担わせること。

* 疑問：なぜ、責務を担わせることが設計作業において良いのか？

  | 答え：疎結合なソフトウェアコンポーネントを設計する為

* 疑問：オブジェクト指向と設計の関係とは？

  | 答え：「個々の部品の設計」におけるクラス・メソッド仕様やIF定義を
  |     どうしていくか考える際に、オブジェクト指向の仕組みを取り入れていく


設計が対象とする範囲は広く深い
--------------------------------------------
* 実行環境を定義する
* 全体的なソフトウェア構造を定義する
* 個々のソフトウェア部品を定義する          ← 特にオブジェクト指向を適用する作業

実行効率よりも保守性・再利用性を重視する時代
--------------------------------------------
* HWが弱かった時代は、要求仕様の次に実行効率が優先された
* HWが強くなった現代は、要求仕様の次に保守性・再利用性が重視される。
* 1番の理由は変化に強いソフトウェアが求められるにもかかわらず、保守コストが増加傾向にあるため

設計の目標①：重複を排除する
--------------------------------------------
* 疑問：どのように排除する？

  | 答え①：コピペプログラミングから脱却する
  | 答え②：サブルーチン化に加えて、「ポリモーフィズム」、「継承」を取り入れること

* **感じたこと**

  | 横（スタックトレース、コールフロー）を伸ばす分は良いのではないかと感じてきた。
  | 維持管理では欲しいデータ、画面項目が増えることはあっても減ることはないから、
  | コンポーネントに手を加えるよりも、どんどんラップや継承したら良いのでは？
  | 使わないコンポーネントが増えたとしても、テストしきれていないコンポーネント増やすよりマシでしょ。


設計の目標②：部品の独立性を高める
--------------------------------------------
* 疑問：どのように独立性を高めると良いか？

  | 答え：「ネーミング」、「カプセル化」、「スモールスタート」を志向する

* 明確な名前を付ける
* 秘密をたくさん作る
* 小さく作る


設計の目標③：依存関係を循環させない
--------------------------------------------
* 疑問：なぜ、依存関係を循環させるべきではないのか？

  | 答え：影響範囲が波及するため。基本はコンパイルエラー。


第11章 オブジェクト指向から始めるアジャイル開発のTDD
****************************************************
* 疑問：TDDとは？

第12章 オブジェクト指向を使いこなそう
****************************************************
* 疑問：どのように使いこなす？

第13章 オブジェクト指向を使いこなそう
****************************************************






